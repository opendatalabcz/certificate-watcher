x-defaults:
  rabbitmq-env-base: &rabbitmq-env-base
    RABBITMQ_DEFAULT_USER: "${RABBITMQ_DEFAULT_USER}"
    RABBITMQ_DEFAULT_PASS: "${RABBITMQ_DEFAULT_PASS}"

  rabbitmq-env-default: &rabbitmq-env-default
    <<: *rabbitmq-env-base

  postgres-env-base: &postgres-env-base
    POSTGRES_USER: "${POSTGRES_USER}"
    POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"

  postgres-env-default: &postgres-env-default
    <<: *postgres-env-base

  certificate-processor-default: &certificate-processor-default
    build:
      context: "services/certificate-processor"
    environment:
      <<: [*postgres-env-default, *rabbitmq-env-default]
      ALGORITHM: "simple"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - "${PROJECT_PATH}/config/:/config/:ro"
      - "${PROJECT_PATH}/services/commons/:/app/src/commons/:ro"
      - "${PROJECT_PATH}/assets/:/assets/"
    depends_on:
      - rabbitmq
      - postgres

services:
  postgres:
    image: postgres:16.1
    restart: always
    ports:
      - "5432:5432"
    environment:
      <<: *postgres-env-base
    volumes:
      - "${PROJECT_PATH}/services/postgres/data:/var/lib/postgresql/data"
      - "${PROJECT_PATH}/services/postgres/init-scripts:/docker-entrypoint-initdb.d"
      - "${PROJECT_PATH}/services/postgres/conf/postgresql.conf:/etc/postgresql/postgresql.conf"

  rabbitmq:
    image: rabbitmq:3.12-management
    restart: always
    platform: linux/x86_64
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      <<: *rabbitmq-env-base

  settings-setup:
    container_name: settings-setup
    build:
      context: "services/settings-setup"
    environment:
      <<: *postgres-env-default
    volumes:
      - "${PROJECT_PATH}/config/:/config/:ro"
      - "${PROJECT_PATH}/services/commons/:/app/src/commons/:ro"
      - "${PROJECT_PATH}/assets/:/assets/"
    depends_on:
      - postgres

  certificate-stream:
    container_name: certificate-stream
    restart: always
    build:
      context: "services/certificate-stream"
    environment:
      <<: *rabbitmq-env-default
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - "${PROJECT_PATH}/config/:/config/:ro"
      - "${PROJECT_PATH}/services/commons/:/app/src/commons/:ro"
    depends_on:
      - rabbitmq

  certificate-processor-domain-str-simple:
    <<: *certificate-processor-default
    restart: always
    deploy:
      replicas: 1
    environment:
      <<: [*postgres-env-base, *rabbitmq-env-base]
      ALGORITHM: "simple"
      SCRAPING_ENABLED: "false"
      RABBITMQ_QUEUE: "cert-processor-simple"
      MODE: "domain"

# Example on how to setup multiple instances of the same service with different configurations
#  -----------------------------------------------------------
#  certificate-processor-levensh:
#    <<: *certificate-processor-default
#    deploy:
#      replicas: 3
#    environment:
#      <<: [*postgres-env-base, *rabbitmq-env-default]
#      ALGORITHM: "levenshtein"
#      SCRAPING_ENABLED: "false"
#      MODE: "domain"
#      RABBITMQ_QUEUE: "cert-processor-levensh"
#
#  certificate-processor-levensh-fuzz:
#    <<: *certificate-processor-default
#    deploy:
#      replicas: 3
#    environment:
#      <<: [ *postgres-env-base, *rabbitmq-env-default ]
#      ALGORITHM: "levensh-fuzz"
#      SCRAPING_ENABLED: "false"
#      MODE: "domain"
#      RABBITMQ_QUEUE: "cert-processor-levensh-fuzz"
#
#  certificate-processor-fuzz:
#    <<: *certificate-processor-default
#    deploy:
#      replicas: 3
#    environment:
#      <<: [ *postgres-env-base, *rabbitmq-env-default ]
#      ALGORITHM: "fuzzing"
#      SCRAPING_ENABLED: "false"
#      MODE: "domain"
#      RABBITMQ_QUEUE: "cert-processor-fuzz"


  certificate-processor-domain-images:
    <<: *certificate-processor-default
    restart: always
    deploy:
      replicas: 5
    environment:
      <<: [ *postgres-env-base, *rabbitmq-env-base ]
      MODE: "image-scrape"

  periodic-scrape-checker:
    container_name: periodic-scrape-checker
    restart: always
    build:
      context: "services/periodic-scrape-checker"
    environment:
      <<: [ *postgres-env-base, *rabbitmq-env-base ]
    volumes:
      - "${PROJECT_PATH}/config/:/config/:ro"
      - "${PROJECT_PATH}/services/commons/:/app/src/commons/:ro"
    depends_on:
      - postgres
      - rabbitmq

  backend:
    container_name: backend
    restart: always
    build:
      context: "services/backend"
    environment:
      <<: *postgres-env-default
      SECRET_KEY: ${SECRET_KEY}
    volumes:
      - "${PROJECT_PATH}/config/:/config/:ro"
      - "${PROJECT_PATH}/services/commons/:/app/src/commons/:ro"
      - "${PROJECT_PATH}/assets/:/assets/"
    depends_on:
      - postgres
    ports:
      - "8000:8000"

  frontend:
    container_name: frontend
    tty: true
    build:
      context: "services/frontend"
    depends_on:
      - backend
      - nginx
    restart: always

  nginx:
    container_name: nginx
    image: nginx:latest
    volumes:
      - "${PROJECT_PATH}/services/nginx:/etc/nginx/conf.d"
    ports:
      - "80:80"
    restart: always


networks:
  default:
    external: true
    name: "certificate-watcher-net"